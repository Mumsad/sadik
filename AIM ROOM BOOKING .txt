AIM: ROOM BOOKING 
SQL QUERY: CREATE TABLE
mysql> CREATE TABLE rmbook( roomid int (10), roomtype char (20), Charges int (10), customer char (20), cContact int (10), Status char (10));
ADD DATA
INSERT INTO rmbook(roomid,roomtype,charges) VALUES (101,"SuperDulex",7000), (102,"SuperDulex",7000), (201,"Suit",9000),(202,"Suit",9000), (301,"Dulex",6000), (302,"Dulex",6000);
CHANGE STATUS TO NOT BOOKED
mysql> UPDATE rmbook SET status = "NOT BOOKED" WHERE status IS NULL;
------------------------------------------------------------------------------
HTML CODE: index.html
<form action="RBServlet" >
 Select a room Type
<input type="radio" name="txtType" value="Dulex">Dulex
<input type="radio" name="txtType" value="SuperDulex">Super Dulex
<input type="radio" name="txtType" value="Suit">Suit<br>
 Enter Your Name<input type="text" name="txtCust" ><br>
 Enter Mobile No.<input type="text" name="txtMob" ><br>
<input type="reset" ><input type="submit" value="Book Room">
</form>
-----------------------------------------------------------------------------
SERVLET CODE: RBServlet.java 
package mypack;

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.ejb.EJB;
import mybeans.RRBean;

public class RBServlet extends HttpServlet {

    @EJB
    RRBean obj;

    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        PrintWriter out = response.getWriter();
        String rt = request.getParameter("txtType");
        String cn = request.getParameter("txtCust");
        String cm = request.getParameter("txtMob");
        String msg = obj.romBook(rt, cn, cm);
        out.println(msg);
    }
}
-----------------------------------------------------------------------------
SESSIONBEANS CODE: RRBean.java
package mybeans;
import javax.ejb.Stateless;
import java.sql.*;
@Stateless
public class RRBean {
    public RRBean() {
    }
    public String romBook(String rt, String cn, String cm) {
        String msg = "";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/temp", "root", "root");
            String query = "select * from rmbook where RoomType=? and status='Not Booked'";
            PreparedStatement pst = con.prepareStatement(query);
            pst.setString(1, rt);
            ResultSet rs = pst.executeQuery();
            if (rs.next()) {
                String rno = rs.getString(1);
                PreparedStatement stm1 = con.prepareStatement("update rmbook set customer=? where RoomId=? ");
                PreparedStatement stm2 = con.prepareStatement("update rmbook set ccontact=? where RoomId=? ");
                PreparedStatement stm3 = con.prepareStatement("update rmbook set status=? where RoomId=? ");
                stm1.setString(1, cn);
                stm1.setString(2, rno);
                stm2.setString(1, cm);
                stm2.setString(2, rno);
                stm3.setString(1, "Booked");
                stm3.setString(2, rno);
                stm1.executeUpdate();
                stm2.executeUpdate();
                stm3.executeUpdate();
                msg = "<h1> Room " + rno + " Booked  " + "Charges = " + rs.getString(3) + "<h1>";
            } else {
                msg = "<h1>Room " + rt + " currently Not available<h1>";
            }
        } catch (Exception e) {
            msg = "" + e;
        }
        return msg;
    }
}


-----------------------------------------------------------------------------------chatGPt

Step 1: Create Entity Class (Room.java)
java
Copy code
// Room.java

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Room {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String roomNumber;
    private boolean isReserved;

    // Constructors, getters, setters, etc.
}
Step 2: Create Session Bean (RoomManager.java)
java
Copy code
// RoomManager.java

import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import java.util.List;

@Stateless
@LocalBean
public class RoomManager {

    @PersistenceContext
    private EntityManager entityManager;

    public List<Room> getAllRooms() {
        return entityManager.createQuery("SELECT r FROM Room r", Room.class).getResultList();
    }

    public Room getRoomById(Long roomId) {
        return entityManager.find(Room.class, roomId);
    }

    public void reserveRoom(Long roomId) {
        Room room = entityManager.find(Room.class, roomId);
        if (room != null && !room.isReserved()) {
            room.setReserved(true);
            entityManager.merge(room);
        }
    }

    public void releaseRoom(Long roomId) {
        Room room = entityManager.find(Room.class, roomId);
        if (room != null && room.isReserved()) {
            room.setReserved(false);
            entityManager.merge(room);
        }
    }
}
Step 3: Create Servlet (RoomReservationServlet.java)
java
Copy code
// RoomReservationServlet.java

import javax.ejb.EJB;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.List;

@WebServlet("/RoomReservationServlet")
public class RoomReservationServlet extends HttpServlet {

    @EJB
    private RoomManager roomManager;

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType("text/html");

        List<Room> rooms = roomManager.getAllRooms();

        // Display room information
        for (Room room : rooms) {
            response.getWriter().println("Room ID: " + room.getId() +
                    ", Room Number: " + room.getRoomNumber() +
                    ", Reserved: " + room.isReserved());
        }

        // Perform room reservation operations using RoomManager EJB
        // (Note: This is a simplified example, and in a real-world scenario, you'd use JSP or other presentation layer technologies)

        Long roomId = Long.parseLong(request.getParameter("roomId"));
        roomManager.reserveRoom(roomId);

        response.getWriter().println("Room reserved successfully!");
    }
}
Step 4: Create persistence.xml
Create the persistence.xml file in the META-INF directory:

xml
Copy code
<!-- persistence.xml -->

<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
             version="2.1">

    <persistence-unit name="RoomReservationPU" transaction-type="JTA">
        <jta-data-source>java:/YourDataSource</jta-data-source>
        <class>com.example.Room</class>
        <properties>
            <property name="hibernate.hbm2ddl.auto" value="update"/>
            <property name="hibernate.show_sql" value="true"/>
        </properties>
    </persistence-unit>

</persistence>
Replace YourDataSource with the actual JNDI name of your datasource.

Step 5: Deploy and Run
Deploy your EJB module to a Java EE-compliant server (e.g., WildFly).

Access the RoomReservationServlet through a web browser or client application to interact with the room reservation system. For example, if you are using a local server, the URL might be http://localhost:8080/your-web-context/RoomReservationServlet. Replace your-web-context with the actual context of your web application.

